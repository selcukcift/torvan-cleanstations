generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "windows"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Part {
  partId                 String                 @id @unique @map("PartID")
  name                   String
  manufacturerPartNumber String?
  type                   PartType
  status                 Status
  photoURL               String?
  technicalDrawingURL    String?
  createdAt              DateTime               @default(now())
  updatedAt              DateTime               @updatedAt
  customAttributes       Json?
  manufacturerName       String?
  revision               String                 @default("1")
  unitOfMeasure          String?
  assemblyComponents     AssemblyComponent[]
  inventoryItems         InventoryItem[]
  serviceOrderItems      ServiceOrderItem[]     @relation("PartServiceOrders")
  taskRequiredParts      TaskRequiredPart[]
  templateStepParts      TaskTemplateStepPart[]
}

model Assembly {
  assemblyId        String              @id @unique @map("AssemblyID")
  name              String
  type              AssemblyType
  categoryCode      String?
  subcategoryCode   String?
  workInstructionId String?
  qrData            String?
  kitComponentsJson String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  customAttributes  Json?
  isOrderable       Boolean             @default(false)
  revision          String              @default("1")
  childOfAssemblies AssemblyComponent[] @relation("ChildComponents")
  components        AssemblyComponent[] @relation("ParentComponents")
  subcategories     Subcategory[]       @relation("SubcategoryAssemblies")
}

model AssemblyComponent {
  id               Int       @id @default(autoincrement())
  quantity         Int
  notes            String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  parentAssemblyId String
  childPartId      String?
  childAssemblyId  String?
  childAssembly    Assembly? @relation("ChildComponents", fields: [childAssemblyId], references: [assemblyId])
  childPart        Part?     @relation(fields: [childPartId], references: [partId])
  parentAssembly   Assembly  @relation("ParentComponents", fields: [parentAssemblyId], references: [assemblyId])
}

model Category {
  categoryId    String        @id @unique
  name          String
  description   String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  subcategories Subcategory[]
}

model Subcategory {
  subcategoryId String     @id @unique
  name          String
  description   String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  categoryId    String
  category      Category   @relation(fields: [categoryId], references: [categoryId])
  assemblies    Assembly[] @relation("SubcategoryAssemblies")
}

model User {
  id                      String                   @id @default(cuid())
  username                String                   @unique
  email                   String                   @unique
  passwordHash            String
  fullName                String
  role                    UserRole
  isActive                Boolean                  @default(true)
  initials                String
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  lastLoginAt             DateTime?
  lockedUntil             DateTime?
  loginAttempts           Int                      @default(0)
  assignedTaskIds         String[]                 @default([])
  auditLogs               AuditLog[]               @relation("UserAuditLogs")
  uploadedFiles           FileUpload[]             @relation("UserFileUploads")
  inventoryUpdates        InventoryItem[]          @relation("UserInventoryUpdates")
  inventoryTransactions   InventoryTransaction[]   @relation("UserInventoryTransactions")
  notifications           Notification[]           @relation("UserNotifications")
  notificationPreferences NotificationPreference[]
  createdOrders           Order[]                  @relation("OrderCreatedBy")
  resolvedComments        OrderComment[]           @relation("UserResolvedComments")
  orderComments           OrderComment[]           @relation("UserOrderComments")
  historyLogs             OrderHistoryLog[]        @relation("UserHistoryLogs")
  qcResults               OrderQcResult[]          @relation("UserQcResults")
  orderTestResults        OrderTestResult[]
  serviceOrders           ServiceOrder[]           @relation("UserServiceOrders")
  systemNotifications     SystemNotification[]     @relation("UserSystemNotifications")
  assignedTasks           Task[]                   @relation("TaskAssignee")
  taskNotes               TaskNote[]               @relation("TaskNoteAuthor")
  performedChecklists     ProductionChecklist[]    @relation("UserPerformedChecklists")
  completedProdTasks      ProductionTask[]         @relation("UserCompletedProdTasks")
  approvedProdDocs        ProductionDocument[]     @relation("UserApprovedProdDocs")
  productionSyncs         ProductionWorkstationSync[] @relation("UserProductionSyncs")
}

model Order {
  id                    String                 @id @default(cuid())
  poNumber              String                 @unique
  buildNumbers          String[]
  customerName          String
  projectName           String?
  salesPerson           String
  wantDate              DateTime
  notes                 String?
  language              String                 @default("EN")
  orderStatus           OrderStatus            @default(ORDER_CREATED)
  currentAssignee       String?
  procurementData       Json?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  createdById           String
  associatedDocuments   AssociatedDocument[]
  basinConfigurations   BasinConfiguration[]
  generatedBoms         Bom[]                  @relation("OrderBoms")
  faucetConfigurations  FaucetConfiguration[]
  inventoryTransactions InventoryTransaction[]
  notifications         Notification[]
  createdBy             User                   @relation("OrderCreatedBy", fields: [createdById], references: [id])
  comments              OrderComment[]
  historyLogs           OrderHistoryLog[]
  qcResults             OrderQcResult[]
  orderTestResults      OrderTestResult[]
  selectedAccessories   SelectedAccessory[]
  sinkConfigurations    SinkConfiguration[]
  sprayerConfigurations SprayerConfiguration[]
  tasks                 Task[]
  productionChecklists  ProductionChecklist[]
  productionTasks       ProductionTask[]
  productionDocuments   ProductionDocument[]
  productionSyncs       ProductionWorkstationSync[]
}

model BasinConfiguration {
  id                  String   @id @default(cuid())
  buildNumber         String
  basinTypeId         String
  basinSizePartNumber String?
  basinCount          Int      @default(1)
  addonIds            String[]
  orderId             String
  customDepth         Float?
  customLength        Float?
  customWidth         Float?
  order               Order    @relation(fields: [orderId], references: [id])

  @@index([orderId, buildNumber])
}

model FaucetConfiguration {
  id              String  @id @default(cuid())
  buildNumber     String
  faucetTypeId    String
  faucetQuantity  Int     @default(1)
  faucetPlacement String?
  orderId         String
  order           Order   @relation(fields: [orderId], references: [id])

  @@unique([orderId, buildNumber])
}

model SprayerConfiguration {
  id               String   @id @default(cuid())
  buildNumber      String
  hasSpray         Boolean  @default(false)
  sprayerTypeIds   String[]
  sprayerQuantity  Int      @default(0)
  sprayerLocations String[]
  orderId          String
  order            Order    @relation(fields: [orderId], references: [id])

  @@unique([orderId, buildNumber])
}

model SinkConfiguration {
  id                        String   @id @default(cuid())
  buildNumber               String
  sinkModelId               String
  width                     Int?
  length                    Int?
  legsTypeId                String?
  feetTypeId                String?
  workflowDirection         String?
  pegboard                  Boolean  @default(false)
  pegboardTypeId            String?
  pegboardColorId           String?
  hasDrawersAndCompartments Boolean  @default(false)
  drawersAndCompartments    String[] @default([])
  controlBoxId              String?
  orderId                   String
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt
  order                     Order    @relation(fields: [orderId], references: [id])

  @@unique([orderId, buildNumber])
}

model SelectedAccessory {
  id          String @id @default(cuid())
  buildNumber String
  assemblyId  String
  quantity    Int    @default(1)
  orderId     String
  order       Order  @relation(fields: [orderId], references: [id])

  @@unique([orderId, buildNumber, assemblyId])
}

model AssociatedDocument {
  id         String   @id @default(cuid())
  docName    String
  docURL     String
  uploadedBy String
  timestamp  DateTime @default(now())
  docType    String?
  orderId    String
  order      Order    @relation(fields: [orderId], references: [id])
}

model Bom {
  id          String    @id @default(cuid())
  buildNumber String?
  generatedAt DateTime  @default(now())
  orderId     String
  order       Order     @relation("OrderBoms", fields: [orderId], references: [id])
  bomItems    BomItem[]
}

model BomItem {
  id                 String    @id @default(cuid())
  partIdOrAssemblyId String
  name               String
  quantity           Int
  itemType           String
  category           String?
  isCustom           Boolean   @default(false)
  parentId           String?
  bomId              String
  bom                Bom       @relation(fields: [bomId], references: [id])
  parent             BomItem?  @relation("ParentChildBomItem", fields: [parentId], references: [id])
  children           BomItem[] @relation("ParentChildBomItem")
}

model OrderHistoryLog {
  id        String   @id @default(cuid())
  timestamp DateTime @default(now())
  action    String
  oldStatus String?
  newStatus String?
  notes     String?
  orderId   String
  userId    String
  order     Order    @relation(fields: [orderId], references: [id])
  user      User     @relation("UserHistoryLogs", fields: [userId], references: [id])
}

model OrderComment {
  id          String               @id @default(cuid())
  orderId     String
  userId      String
  content     String
  isInternal  Boolean              @default(false)
  priority    OrderCommentPriority @default(NORMAL)
  category    String?
  isResolved  Boolean              @default(false)
  resolvedAt  DateTime?
  resolvedBy  String?
  mentions    String[]             @default([])
  attachments String[]             @default([])
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  order       Order                @relation(fields: [orderId], references: [id], onDelete: Cascade)
  resolver    User?                @relation("UserResolvedComments", fields: [resolvedBy], references: [id])
  user        User                 @relation("UserOrderComments", fields: [userId], references: [id])

  @@index([orderId, createdAt])
  @@index([userId, createdAt])
  @@index([isResolved, priority])
}

model Notification {
  id          String   @id @default(cuid())
  message     String
  linkToOrder String?
  isRead      Boolean  @default(false)
  type        String?
  createdAt   DateTime @default(now())
  recipientId String
  order       Order?   @relation(fields: [linkToOrder], references: [id])
  recipient   User     @relation("UserNotifications", fields: [recipientId], references: [id])
}

model QcFormTemplate {
  id                     String               @id @default(cuid())
  name                   String
  version                String               @default("1.0")
  description            String?
  isActive               Boolean              @default(true)
  appliesToProductFamily String?
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  orderQcResults         OrderQcResult[]
  items                  QcFormTemplateItem[]
}

model QcFormTemplateItem {
  id                     String              @id @default(cuid())
  templateId             String
  section                String
  checklistItem          String
  itemType               QcItemType
  options                Json?
  expectedValue          String?
  order                  Int
  isRequired             Boolean             @default(true)
  applicabilityCondition String?
  defaultValue           String?
  notesPrompt            String?
  relatedAssemblyId      String?
  relatedPartNumber      String?
  repeatPer              String?
  itemResults            OrderQcItemResult[]
  template               QcFormTemplate      @relation(fields: [templateId], references: [id], onDelete: Cascade)
  tasks                  Task[]
  templateSteps          TaskTemplateStep[]
}

model OrderQcResult {
  id               String              @id @default(cuid())
  orderId          String
  qcFormTemplateId String
  qcPerformedById  String
  qcTimestamp      DateTime            @default(now())
  overallStatus    QcStatus            @default(PENDING)
  notes            String?
  externalJobId    String?
  itemResults      OrderQcItemResult[]
  order            Order               @relation(fields: [orderId], references: [id])
  qcFormTemplate   QcFormTemplate      @relation(fields: [qcFormTemplateId], references: [id])
  qcPerformedBy    User                @relation("UserQcResults", fields: [qcPerformedById], references: [id])

  @@unique([orderId, qcFormTemplateId])
}

model OrderQcItemResult {
  id                    String             @id @default(cuid())
  orderQcResultId       String
  qcFormTemplateItemId  String
  resultValue           String?
  isConformant          Boolean?
  notes                 String?
  attachedDocumentId    String?
  isNotApplicable       Boolean            @default(false)
  repetitionInstanceKey String?
  attachedDocument      FileUpload?        @relation("QcResultDocument", fields: [attachedDocumentId], references: [id])
  orderQcResult         OrderQcResult      @relation(fields: [orderQcResultId], references: [id], onDelete: Cascade)
  qcFormTemplateItem    QcFormTemplateItem @relation(fields: [qcFormTemplateItemId], references: [id])
}

model ServiceOrder {
  id               String             @id @default(cuid())
  requestedById    String
  requestTimestamp DateTime           @default(now())
  status           ServiceOrderStatus @default(PENDING_APPROVAL)
  notes            String?
  procurementNotes String?
  updatedAt        DateTime           @updatedAt
  requestedBy      User               @relation("UserServiceOrders", fields: [requestedById], references: [id])
  items            ServiceOrderItem[]
}

model ServiceOrderItem {
  id                String       @id @default(cuid())
  serviceOrderId    String
  partId            String
  quantityRequested Int
  quantityApproved  Int?
  notes             String?
  part              Part         @relation("PartServiceOrders", fields: [partId], references: [partId])
  serviceOrder      ServiceOrder @relation(fields: [serviceOrderId], references: [id], onDelete: Cascade)
}

model WorkInstruction {
  id               String                @id @default(cuid())
  title            String
  description      String?
  assemblyId       String?
  version          String                @default("1.0")
  isActive         Boolean               @default(true)
  estimatedMinutes Int?
  createdAt        DateTime              @default(now())
  updatedAt        DateTime              @updatedAt
  tasks            Task[]
  templateSteps    TaskTemplateStep[]
  steps            WorkInstructionStep[]
}

model WorkInstructionStep {
  id                String          @id @default(cuid())
  workInstructionId String
  stepNumber        Int
  title             String
  description       String
  estimatedMinutes  Int?
  images            String[]
  videos            String[]
  checkpoints       String[]
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  requiredTools     TaskTool[]
  workInstruction   WorkInstruction @relation(fields: [workInstructionId], references: [id], onDelete: Cascade)

  @@unique([workInstructionId, stepNumber])
  @@index([workInstructionId, stepNumber])
}

model Tool {
  id                String                 @id @default(cuid())
  name              String
  description       String?
  category          String
  isActive          Boolean                @default(true)
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  templateStepTools TaskTemplateStepTool[]
  taskTools         TaskTool[]
}

model Task {
  id                    String                 @id @default(cuid())
  orderId               String
  workInstructionId     String?
  title                 String
  description           String?
  status                TaskStatus             @default(PENDING)
  priority              TaskPriority           @default(MEDIUM)
  assignedToId          String?
  estimatedMinutes      Int?
  actualMinutes         Int?
  startedAt             DateTime?
  completedAt           DateTime?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  buildNumber           String?
  qcFormTemplateItemId  String?
  taskTemplateStepId    String?
  inventoryTransactions InventoryTransaction[]
  assignedTo            User?                  @relation("TaskAssignee", fields: [assignedToId], references: [id])
  order                 Order                  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  qcFormTemplateItem    QcFormTemplateItem?    @relation(fields: [qcFormTemplateItemId], references: [id])
  taskTemplateStep      TaskTemplateStep?      @relation(fields: [taskTemplateStepId], references: [id])
  workInstruction       WorkInstruction?       @relation(fields: [workInstructionId], references: [id])
  dependents            TaskDependency[]       @relation("DependentTasks")
  dependencies          TaskDependency[]       @relation("TaskDependencies")
  notes                 TaskNote[]
  requiredParts         TaskRequiredPart[]
  tools                 TaskTool[]

  @@index([orderId, status])
  @@index([assignedToId, status])
  @@index([status, priority])
}

model TaskRequiredPart {
  id         String  @id @default(cuid())
  taskId     String
  partId     String
  quantity   Int     @default(1)
  notes      String?
  isConsumed Boolean @default(false)
  part       Part    @relation(fields: [partId], references: [partId])
  task       Task    @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@unique([taskId, partId])
}

model TaskDependency {
  id          String   @id @default(cuid())
  taskId      String
  dependsOnId String
  createdAt   DateTime @default(now())
  dependsOn   Task     @relation("DependentTasks", fields: [dependsOnId], references: [id], onDelete: Cascade)
  task        Task     @relation("TaskDependencies", fields: [taskId], references: [id], onDelete: Cascade)

  @@unique([taskId, dependsOnId])
  @@index([taskId, dependsOnId])
}

model TaskTool {
  id     String               @id @default(cuid())
  taskId String?
  stepId String?
  toolId String
  step   WorkInstructionStep? @relation(fields: [stepId], references: [id], onDelete: Cascade)
  task   Task?                @relation(fields: [taskId], references: [id], onDelete: Cascade)
  tool   Tool                 @relation(fields: [toolId], references: [id])

  @@unique([taskId, toolId], name: "unique_task_tool")
  @@unique([stepId, toolId], name: "unique_step_tool")
}

model TaskNote {
  id        String   @id @default(cuid())
  taskId    String
  authorId  String
  content   String
  createdAt DateTime @default(now())
  author    User     @relation("TaskNoteAuthor", fields: [authorId], references: [id], onDelete: Cascade)
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@index([taskId, createdAt])
}

model SystemNotification {
  id        String               @id @default(cuid())
  userId    String?
  type      NotificationType
  title     String
  message   String
  data      Json?
  isRead    Boolean              @default(false)
  priority  NotificationPriority @default(NORMAL)
  expiresAt DateTime?
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
  user      User?                @relation("UserSystemNotifications", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, isRead])
  @@index([type, createdAt])
}

model FileUpload {
  id              String                @id @default(cuid())
  filename        String
  originalName    String
  mimeType        String
  size            Int
  path            String
  uploadedById    String
  isPublic        Boolean               @default(false)
  metadata        Json?
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
  uploadedBy      User                  @relation("UserFileUploads", fields: [uploadedById], references: [id])
  qcItemResults   OrderQcItemResult[]   @relation("QcResultDocument")
  testStepResults OrderTestStepResult[] @relation("TestStepResultDocument")

  @@index([uploadedById, createdAt])
}

model InventoryItem {
  id                String                 @id @default(cuid())
  partId            String?
  assemblyId        String?
  location          String?
  quantityOnHand    Int                    @default(0)
  quantityReserved  Int                    @default(0)
  quantityAvailable Int                    @default(0)
  reorderPoint      Int?
  maxStock          Int?
  lastUpdated       DateTime               @default(now()) @updatedAt
  updatedById       String
  batchOrLotNumber  String?
  expirationDate    DateTime?
  inventoryStatus   InventoryStatus        @default(AVAILABLE)
  serialNumber      String?
  part              Part?                  @relation(fields: [partId], references: [partId], onDelete: Cascade)
  updatedBy         User                   @relation("UserInventoryUpdates", fields: [updatedById], references: [id])
  transactions      InventoryTransaction[]

  @@unique([partId, assemblyId, location])
  @@index([partId, assemblyId])
  @@index([serialNumber])
}

model InventoryTransaction {
  id              String                   @id @default(cuid())
  inventoryItemId String
  type            InventoryTransactionType
  quantity        Int
  reason          String?
  orderId         String?
  taskId          String?
  performedById   String
  createdAt       DateTime                 @default(now())
  inventoryItem   InventoryItem            @relation(fields: [inventoryItemId], references: [id], onDelete: Cascade)
  order           Order?                   @relation(fields: [orderId], references: [id])
  performedBy     User                     @relation("UserInventoryTransactions", fields: [performedById], references: [id])
  task            Task?                    @relation(fields: [taskId], references: [id])

  @@index([inventoryItemId, createdAt])
}

model AuditLog {
  id         String   @id @default(cuid())
  userId     String?
  action     String
  entityType String
  entityId   String
  oldValues  Json?
  newValues  Json?
  ipAddress  String?
  userAgent  String?
  sessionId  String?
  createdAt  DateTime @default(now())
  user       User?    @relation("UserAuditLogs", fields: [userId], references: [id])

  @@index([entityType, entityId])
  @@index([userId, createdAt])
}

model TaskTemplate {
  id                     String             @id @default(cuid())
  name                   String             @unique
  description            String?
  appliesToAssemblyType  AssemblyType?
  appliesToProductFamily String?
  version                String             @default("1.0")
  isActive               Boolean            @default(true)
  createdAt              DateTime           @default(now())
  updatedAt              DateTime           @updatedAt
  steps                  TaskTemplateStep[]
}

model TaskTemplateStep {
  id                   String                 @id @default(cuid())
  taskTemplateId       String
  stepNumber           Int
  title                String
  description          String?
  estimatedMinutes     Int?
  workInstructionId    String?
  qcFormTemplateItemId String?
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  instantiatedTasks    Task[]
  qcFormTemplateItem   QcFormTemplateItem?    @relation(fields: [qcFormTemplateItemId], references: [id])
  taskTemplate         TaskTemplate           @relation(fields: [taskTemplateId], references: [id], onDelete: Cascade)
  workInstruction      WorkInstruction?       @relation(fields: [workInstructionId], references: [id])
  requiredParts        TaskTemplateStepPart[]
  requiredTools        TaskTemplateStepTool[]

  @@unique([taskTemplateId, stepNumber])
  @@index([taskTemplateId, stepNumber])
}

model TaskTemplateStepTool {
  id                 String           @id @default(cuid())
  taskTemplateStepId String
  toolId             String
  notes              String?
  taskTemplateStep   TaskTemplateStep @relation(fields: [taskTemplateStepId], references: [id], onDelete: Cascade)
  tool               Tool             @relation(fields: [toolId], references: [id])

  @@unique([taskTemplateStepId, toolId])
}

model TaskTemplateStepPart {
  id                 String           @id @default(cuid())
  taskTemplateStepId String
  partId             String
  quantity           Int              @default(1)
  notes              String?
  part               Part             @relation(fields: [partId], references: [partId])
  taskTemplateStep   TaskTemplateStep @relation(fields: [taskTemplateStepId], references: [id], onDelete: Cascade)

  @@unique([taskTemplateStepId, partId])
}

model TestProcedureTemplate {
  id                       String                      @id @default(cuid())
  name                     String                      @unique
  description              String?
  version                  String                      @default("1.0")
  productFamily            String?
  isActive                 Boolean                     @default(true)
  estimatedDurationMinutes Int?
  createdAt                DateTime                    @default(now())
  updatedAt                DateTime                    @updatedAt
  orderTestResults         OrderTestResult[]
  steps                    TestProcedureStepTemplate[]
}

model TestProcedureStepTemplate {
  id                               String                @id @default(cuid())
  testProcedureTemplateId          String
  stepNumber                       Int
  title                            String
  instruction                      String
  expectedOutcome                  String?
  inputDataType                    TestStepInputType
  numericUnit                      String?
  numericLowerLimit                Float?
  numericUpperLimit                Float?
  options                          Json?
  isRequired                       Boolean               @default(true)
  repeatPerInstance                String?
  linkedCalibrationEquipmentTypeId String?
  createdAt                        DateTime              @default(now())
  updatedAt                        DateTime              @updatedAt
  orderTestStepResults             OrderTestStepResult[]
  testProcedureTemplate            TestProcedureTemplate @relation(fields: [testProcedureTemplateId], references: [id], onDelete: Cascade)

  @@unique([testProcedureTemplateId, stepNumber])
  @@index([testProcedureTemplateId, stepNumber])
}

model OrderTestResult {
  id                      String                @id @default(cuid())
  orderId                 String
  buildNumber             String
  testProcedureTemplateId String
  testedById              String
  overallStatus           TestStatus            @default(PENDING)
  startedAt               DateTime?
  completedAt             DateTime?
  notes                   String?
  createdAt               DateTime              @default(now())
  updatedAt               DateTime              @updatedAt
  order                   Order                 @relation(fields: [orderId], references: [id])
  testProcedureTemplate   TestProcedureTemplate @relation(fields: [testProcedureTemplateId], references: [id])
  testedBy                User                  @relation(fields: [testedById], references: [id])
  stepResults             OrderTestStepResult[]

  @@unique([orderId, buildNumber, testProcedureTemplateId])
  @@index([orderId, buildNumber])
}

model OrderTestStepResult {
  id                          String                    @id @default(cuid())
  orderTestResultId           String
  testProcedureStepTemplateId String
  instanceKey                 String?
  stringValue                 String?
  numericValue                Float?
  passFailValue               Boolean?
  fileUploadId                String?
  isConformant                Boolean?
  notes                       String?
  recordedAt                  DateTime                  @default(now())
  calibrationData             String?
  fileUpload                  FileUpload?               @relation("TestStepResultDocument", fields: [fileUploadId], references: [id])
  orderTestResult             OrderTestResult           @relation(fields: [orderTestResultId], references: [id], onDelete: Cascade)
  testProcedureStepTemplate   TestProcedureStepTemplate @relation(fields: [testProcedureStepTemplateId], references: [id])

  @@index([orderTestResultId])
}

model NotificationPreference {
  id               String                @id @default(cuid())
  userId           String
  notificationType NotificationType
  inAppEnabled     Boolean               @default(true)
  emailEnabled     Boolean               @default(false)
  frequency        NotificationFrequency @default(IMMEDIATE)
  quietHoursStart  Int?
  quietHoursEnd    Int?
  emailAddress     String?
  isActive         Boolean               @default(true)
  createdAt        DateTime              @default(now())
  updatedAt        DateTime              @updatedAt
  user             User                  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, notificationType])
  @@index([userId, notificationType])
}

enum PartType {
  COMPONENT
  MATERIAL
}

enum Status {
  ACTIVE
  INACTIVE
}

enum AssemblyType {
  SIMPLE
  COMPLEX
  SERVICE_PART
  KIT
}

enum UserRole {
  ADMIN
  PRODUCTION_COORDINATOR
  PROCUREMENT_SPECIALIST
  QC_PERSON
  ASSEMBLER
  SERVICE_DEPARTMENT
}

enum OrderStatus {
  ORDER_CREATED
  SINK_BODY_EXTERNAL_PRODUCTION
  READY_FOR_PRE_QC
  READY_FOR_PRODUCTION
  TESTING_COMPLETE
  PACKAGING_COMPLETE
  READY_FOR_FINAL_QC
  READY_FOR_SHIP
  SHIPPED
}

enum QcItemType {
  PASS_FAIL
  TEXT_INPUT
  NUMERIC_INPUT
  SINGLE_SELECT
  MULTI_SELECT
  DATE_INPUT
  CHECKBOX
}

enum QcStatus {
  PENDING
  IN_PROGRESS
  PASSED
  FAILED
  REQUIRES_REVIEW
}

enum ServiceOrderStatus {
  PENDING_APPROVAL
  APPROVED
  REJECTED
  ORDERED
  RECEIVED
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  BLOCKED
  CANCELLED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum NotificationType {
  ORDER_STATUS_CHANGE
  TASK_ASSIGNMENT
  QC_APPROVAL_REQUIRED
  ASSEMBLY_MILESTONE
  SERVICE_REQUEST
  SYSTEM_ALERT
  INVENTORY_LOW
  DEADLINE_APPROACHING
}

enum NotificationPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum NotificationFrequency {
  IMMEDIATE
  HOURLY
  DAILY
  WEEKLY
}

enum OrderCommentPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum ProductionChecklistStatus {
  DRAFT
  IN_PROGRESS
  COMPLETED
  APPROVED
}

enum ProductionDocType {
  CHECKLIST_REPORT
  COMPLETION_CERTIFICATE
  QC_REPORT
  COMPLIANCE_PACKAGE
  PRODUCTION_SUMMARY
}

enum InventoryTransactionType {
  INCOMING
  OUTGOING
  ADJUSTMENT
  RESERVED
  RELEASED
}

enum InventoryStatus {
  AVAILABLE
  NON_CONFORMING
  IN_TRANSIT
  RESERVED
  DEFECTIVE
}

enum TestStepInputType {
  TEXT
  NUMERIC
  PASS_FAIL
  SINGLE_SELECT
  MULTI_SELECT
  SCAN_SN
  FILE_UPLOAD
}

enum TestStatus {
  PENDING
  IN_PROGRESS
  PASSED
  FAILED
}

// Production Management Models

model ProductionChecklist {
  id            String   @id @default(cuid())
  orderId       String
  buildNumber   String?
  jobId         String
  sections      Json     // Structured checklist data from CLP.T2.001.V01
  signatures    Json     // Digital signatures array
  status        ProductionChecklistStatus @default(DRAFT)
  performedBy   String
  performedById String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  completedAt   DateTime?
  
  order         Order    @relation(fields: [orderId], references: [id])
  performer     User     @relation("UserPerformedChecklists", fields: [performedById], references: [id])
  
  @@unique([orderId, buildNumber])
  @@index([status, orderId])
}

model ProductionTask {
  id            String   @id @default(cuid())
  orderId       String
  buildNumber   String?
  taskId        String   // From ConfigurationDrivenTasks
  category      String
  title         String
  description   String
  completed     Boolean  @default(false)
  actualTime    Int?     // minutes
  estimatedTime Int
  photos        String[] @default([])
  notes         String?
  startedAt     DateTime?
  completedAt   DateTime?
  completedBy   String?
  
  order         Order    @relation(fields: [orderId], references: [id])
  completer     User?    @relation("UserCompletedProdTasks", fields: [completedBy], references: [id])
  
  @@index([orderId, category])
  @@index([completed, orderId])
}

model ProductionMetrics {
  id               String   @id @default(cuid())
  date             DateTime @db.Date
  ordersStarted    Int      @default(0)
  ordersCompleted  Int      @default(0)
  avgCycleTime     Float?   // hours
  avgTaskTime      Json     // by category
  bottlenecks      Json     // identified issues
  qualityScore     Float?   // percentage
  createdAt        DateTime @default(now())
  
  @@unique([date])
  @@index([date])
}

model ProductionDocument {
  id            String   @id @default(cuid())
  orderId       String
  buildNumber   String?
  type          ProductionDocType
  title         String
  version       Int      @default(1)
  content       String   @db.Text
  format        String   // pdf, html, etc
  approved      Boolean  @default(false)
  approvedBy    String?
  approvedAt    DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  order         Order    @relation(fields: [orderId], references: [id])
  approver      User?    @relation("UserApprovedProdDocs", fields: [approvedBy], references: [id])
  
  @@index([orderId, type])
}

model ProductionWorkstationSync {
  id            String   @id @default(cuid())
  userId        String
  orderId       String
  syncData      Json     // Offline changes to sync
  synced        Boolean  @default(false)
  syncedAt      DateTime?
  createdAt     DateTime @default(now())
  
  user          User     @relation("UserProductionSyncs", fields: [userId], references: [id])
  order         Order    @relation(fields: [orderId], references: [id])
  
  @@index([synced, userId])
}
